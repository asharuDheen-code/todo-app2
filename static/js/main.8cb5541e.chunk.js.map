{"version":3,"sources":["serviceWorker.js","todoapp/todoapp.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","todoapp","state","input","items","handleChange","event","setState","target","value","storeItem","preventDefault","deletItem","index","allItems","splice","this","className","onChange","placeholder","type","onClick","map","data","key","id","class","Component","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCuDSC,G,MAtEf,4MACEC,MAAQ,CACNC,MAAO,GACPC,MAAO,IAHX,EAMEC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZJ,MAAOG,EAAME,OAAOC,SAR1B,EAYEC,UAAY,SAACJ,GACXA,EAAMK,iBADe,IAEbR,EAAU,EAAKD,MAAfC,MAER,EAAKI,SAAS,CACZH,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwBD,IAC7BA,MAAO,MAlBb,EAsBES,UAAY,SAACC,GACX,IAAMC,EAAW,EAAKZ,MAAME,MAE5BU,EAASC,OAAOF,EAAO,GAEvB,EAAKN,SAAS,CACZH,MAAOU,KA5Bb,uDAgCY,IAAD,SAEkBE,KAAKd,MAAtBC,EAFD,EAECA,MAAOC,EAFR,EAEQA,MAEf,OACE,yBAAKa,UAAU,aACb,wBAAIA,UAAU,SAAd,aACA,yBAAKA,UAAU,iBACb,2BAEER,MAAON,EACPe,SAAUF,KAAKX,aACfY,UAAU,WACVE,YAAY,mBACZC,KAAK,SAEP,4BAAQH,UAAU,aAAaI,QAASL,KAAKN,WAA7C,yBAIF,6BACA,4BACGN,EAAMkB,KAAI,SAACC,EAAMV,GAAP,OACT,wBAAIW,IAAKX,GACNU,EACD,uBAAGE,GAAG,aAAaC,MAAM,sBACzB,uBACAD,GAAG,YACDR,UAAU,mBACVI,QAAS,kBAAM,EAAKT,UAAUC,MAC1B,cA9DpB,GAA6Bc,cCUdC,E,uKARX,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,W,GAJUU,aCElBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SH0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8cb5541e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport \"./todoapp.css\";\r\n\r\nexport class todoapp extends Component {\r\n  state = {\r\n    input: \"\",\r\n    items: [],\r\n  };\r\n  //  EVENT Perameter using for Fetching the INPUT VALUE... üçè\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      input: event.target.value,\r\n    });\r\n  };\r\n\r\n  storeItem = (event) => {\r\n    event.preventDefault();\r\n    const { input } = this.state;\r\n\r\n    this.setState({\r\n      items: [...this.state.items, input],\r\n      input: \"\",\r\n    });\r\n  };\r\n\r\n  deletItem = (index) => {\r\n    const allItems = this.state.items;\r\n\r\n    allItems.splice(index, 1);\r\n\r\n    this.setState({\r\n      items: allItems,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // DESTRECTURING METHOD\r\n    const { input, items } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"h1Tag\">ToDo List</h1>\r\n        <div className=\"input-section\">\r\n          <input\r\n            // DESTRECTURING METHOD Using Her\r\n            value={input}\r\n            onChange={this.handleChange}\r\n            className=\"inputBox\"\r\n            placeholder=\"Add ToDo List...\"\r\n            type=\"text\"\r\n          />\r\n          <button className=\"todoButton\" onClick={this.storeItem}>\r\n            Add List‚úîÔ∏è\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <ul>\r\n          {items.map((data, index) => (\r\n            <li key={index}>\r\n              {data}\r\n              <i id=\"iconpencil\" class=\"fas fa-pencil-alt\"></i>\r\n              <i\r\n              id=\"iconTrash\"\r\n                className=\"fas fa-trash-alt\"\r\n                onClick={() => this.deletItem(index)}\r\n              ></i>{\" \"}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default todoapp;\r\n","import React, {Component} from 'react';\nimport Todoapp from './todoapp/todoapp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Todoapp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}